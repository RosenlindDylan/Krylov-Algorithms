import numpy as np
from gmres import GMRESSolver


# b should have entries generated uniformly between [0,1] according to the paper
def generateB(size):
    return np.random.rand(size)

b = generateB(10)
print('The target vector is ' + str(b))

# A any large sparce matrix for GMRES, later i'll write a method to generate random ones
A = np.array([[1.00000000, 0.03677389, 0.00000000, 0.97869604, 0.00000000, 0.47722024, 0.00000000, 0.00000000, 0.00000000, 0.00000000],
 [0.03677389, 1.00000000, 0.00000000, 0.00000000, 0.84396722, 0.80661557, 0.00000000, 0.00000000, 0.00000000, 0.00000000],
 [0.00000000, 0.00000000, 1.00000000, 0.00000000, 0.00000000, 0.00000000, 0.18467612, 0.00000000, 0.00000000, 0.00000000],
 [0.97869604, 0.00000000, 0.00000000, 1.00000000, 0.00000000, 0.00000000, 0.00000000, 0.21125068, 0.00000000, 0.00000000],
 [0.00000000, 0.84396722, 0.00000000, 0.00000000, 1.00000000, 0.66669913, 0.00000000, 0.00000000, 0.87047764, 0.00000000],
 [0.47722024, 0.80661557, 0.00000000, 0.00000000, 0.66669913, 1.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000],
 [0.00000000, 0.00000000, 0.18467612, 0.00000000, 0.00000000, 0.00000000, 1.00000000, 0.00000000, 0.00000000, 0.74501799],
 [0.00000000, 0.00000000, 0.00000000, 0.21125068, 0.00000000, 0.00000000, 0.00000000, 1.00000000, 0.00000000, 0.72975303],
 [0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.87047764, 0.00000000, 0.00000000, 0.00000000, 1.00000000, 0.78071397],
 [0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.00000000, 0.74501799, 0.72975303, 0.78071397, 1.00000000]]
)

# initial guess is x_0 = 0
x_0 = np.zeros(10)

# maximum iterations
itMax = 100

x = (GMRESSolver(A, b , x_0, itMax))
print('The solution vector from GMRES is: ' + str(x))

print('Checking the final guess vector x against matrix A gives: ' + str(np.dot(A,x)))